#!/usr/bin/perl

# It's like envsubst, but uses {{mustache}} style, and is written
# in perl for some reason. I like it though and it was fun to build!

use strict;
use warnings FATAL => 'all';

use File::Basename;
use File::Path;
use File::Spec;
use File::Find;
use File::Temp;
use File::Copy;

sub usage {
    if ($_[0]) {
        print "\033[31m", $_[0], "\033[0m\n\n";
    }
    printf "Usage: %s [SOURCE_DIR], [TARGET_DIR]", File::Basename::basename($0);
}

if (!$ARGV[0]) {
    usage("Invalid usage: SOURCE_DIR not provided");
    exit 1;
} elsif (!-d $ARGV[0]) {
    usage("Error: SOURCE_DIR does not exist");
    exit 1;
} elsif (!$ARGV[1]) {
    usage("Invalid usage: TARGET_DIR not provided");
    exit 1;
}

if (!-d $ARGV[1]) {
    File::Path::make_path($ARGV[1]);
}

my $tmpdir = File::Temp::newdir();
my $source_dir = File::Spec->rel2abs($ARGV[0]);
my $target_dir = File::Spec->rel2abs($ARGV[1]);
my $PATTERN = qr/\{\{([0-9a-zA-Z_-]+)\}\}/;
my @unset_variables;

File::Find::find(
    sub {
        if ($_ eq '.' || $_ eq '..') {
            return;
        } elsif (-d $_) {
            my $clone_dir_path = File::Spec->catdir(
                $tmpdir,
                File::Spec->abs2rel($File::Find::name, $source_dir)
            );
            File::Path::make_path($clone_dir_path);
            return;
        } elsif (!-f $_) {
            return;
        }

        my $src_file = $File::Find::name;
        my $dst_file = File::Spec->catfile($tmpdir, File::Spec->abs2rel($src_file, $source_dir));

        open(SRC, "<", $src_file) or die $!;
        open(DES, ">", $dst_file) or die $!;

        while(<SRC>) {
            if ($_ =~ /$PATTERN/) {
                if (!$ENV{$1}) {
                    push @unset_variables, $1;
                    s/$PATTERN/\033[91m\033[1m{{$1}}\033[0m/;
                    print STDERR
                        "\033[2m", # faint
                        $src_file,
                        "\n",
                        "$.: ", # line number
                        "\033[0m",
                        $_, # offending line,
                        "\n";
                } else {
                    s/$PATTERN/$ENV{$1}/g;
                }
            }
            print DES $_;
        }

        close(SRC);
        close(DES);
    },
    $source_dir
);

if (scalar(@unset_variables) > 0) {
    print "\033[91mAborting due to unset variable(s): ", join(', ', @unset_variables), "\033[0m\n";
    exit 1;
}

File::Find::find(
    sub {
        my $file_relative_to_tmpdir = File::Spec->abs2rel($File::Find::name, $tmpdir);
        if ($_ eq '.' || $_ eq '..') {
            return;
        } elsif (-d $_) {
            File::Path::make_path(File::Spec->catdir($target_dir, $file_relative_to_tmpdir));
        } elsif (!-f $_) {
            return;
        }
        File::Copy::copy($File::Find::name, File::Spec->catfile($target_dir, $file_relative_to_tmpdir))
    },
    $tmpdir
);
